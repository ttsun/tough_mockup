[
{
    "pk": 1, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "eos_name", 
        "val": " 'HYDRATE-EQUILIBRIUM'"
    }
},
{
    "pk": 2, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "number_of_components", 
        "val": " 2,        "
    }
},
{
    "pk": 3, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "number_of_equations", 
        "val": " 3           "
    }
},
{
    "pk": 4, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "coordinate_system", 
        "val": " 'Cylindrical'"
    }
},
{
    "pk": 5, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "num_characters_in_element_name", 
        "val": " 5"
    }
},
{
    "pk": 6, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "max_number_of_elements", 
        "val": " 48000"
    }
},
{
    "pk": 7, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "max_number_of_connections", 
        "val": " 110000"
    }
},
{
    "pk": 8, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "max_number_of_sources_and_sinks", 
        "val": " 200"
    }
},
{
    "pk": 9, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "max_number_of_geologic_media", 
        "val": " 12"
    }
},
{
    "pk": 10, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "porosity_perm_dependence_f", 
        "val": " .FALSE.,   ! DEFAULT value:"
    }
},
{
    "pk": 11, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "scaled_capillary_pressure_f", 
        "val": " .FALSE.,   ! DEFAULT value:"
    }
},
{
    "pk": 12, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "reversible_porosity_change_f", 
        "val": " .TRUE.,    ! Activated only when solid phases (ice or hydrate) are involved"
    }
},
{
    "pk": 13, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "accounting_for_diffusion_f", 
        "val": " .FALSE.,    ! Default value:"
    }
},
{
    "pk": 14, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "active_connections_only_f", 
        "val": " .FALSE.,   ! Determines if the active connections are to be identified; Default value:"
    }
},
{
    "pk": 15, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "boundaries_in_matrix_f", 
        "val": " .FALSE.,   ! Determines the treatment of the inactive elements; Default value:"
    }
},
{
    "pk": 16, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "equilibration_run_f", 
        "val": " .FALSE. "
    }
},
{
    "pk": 17, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "coupled_geochemistry_f", 
        "val": " .FALSE.,       ! DEFAULT value:"
    }
},
{
    "pk": 18, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 12, 
        "var_name": "coupled_geomechanics_f", 
        "val": " .FALSE.,       ! DEFAULT value: .FALSE. "
    }
},
{
    "pk": 19, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "number_hydrate_forming_gases", 
        "val": " 1,"
    }
},
{
    "pk": 20, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_component_gas_names", 
        "val": " 'CH4',      ! Name of hydrate-forming gas in composite hydrates "
    }
},
{
    "pk": 21, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "gas_hydration_number", 
        "val": " 6.0d0,      ! Hydration number of this specific gas hydrate"
    }
},
{
    "pk": 22, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "gas_mole_fraction_in_hydrate", 
        "val": " 1.0d0       ! Mole fraction of the specific gas hydrate in the composite"
    }
},
{
    "pk": 23, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_thermcond_equation_option", 
        "val": " 'CONSTANT'"
    }
},
{
    "pk": 24, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_thermcond_numcoeff", 
        "val": " 1, "
    }
},
{
    "pk": 25, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_thermcond_coeff", 
        "val": " 4.5d-1 "
    }
},
{
    "pk": 26, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_specheat_equation_option", 
        "val": " 'CONSTANT'"
    }
},
{
    "pk": 27, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_specheat_numcoeff", 
        "val": " 1, "
    }
},
{
    "pk": 28, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_specheat_coeff", 
        "val": " 2.1d3"
    }
},
{
    "pk": 29, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_density_equation_option", 
        "val": " 'CONSTANT'"
    }
},
{
    "pk": 30, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_density_numcoeff", 
        "val": " 1, "
    }
},
{
    "pk": 31, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "hydrate_density_coeff", 
        "val": " 9.2d2"
    }
},
{
    "pk": 32, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "flag_inhibitorpresent", 
        "val": " .FALSE."
    }
},
{
    "pk": 33, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "maxium_t_shift", 
        "val": " 2.0d0"
    }
},
{
    "pk": 34, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "inhibitor_molefraction_at_maxt_shift", 
        "val": " 1.335d-2"
    }
},
{
    "pk": 35, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "inhibitor_mw", 
        "val": " 58.448d0"
    }
},
{
    "pk": 36, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "inhibitor_density", 
        "val": " 2.6d3"
    }
},
{
    "pk": 37, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "inhibitor_dissolution_enth", 
        "val": " 6.6479d4"
    }
},
{
    "pk": 38, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "inhibitor_specheat_coeff", 
        "val": " 41.293d0, 3.3607d-2, -1.3927d-5"
    }
},
{
    "pk": 39, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "type_of_dissociation_reaction", 
        "val": " 'EQUILIBRIUM', ! ... Options: 'EQUILIBRIUM' or"
    }
},
{
    "pk": 40, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "compositional_t_shift", 
        "val": " 0.0d0,"
    }
},
{
    "pk": 41, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "dissociation_pth_equation_option", 
        "val": " 2"
    }
},
{
    "pk": 42, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "activation_energy", 
        "val": " 8.1d4,  ! ... For kinetic dissociation"
    }
},
{
    "pk": 43, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "intrinsic_rate_constant", 
        "val": " 3.6d4,  ! ... For kinetic dissociation"
    }
},
{
    "pk": 44, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 4, 
        "var_name": "area_factor", 
        "val": " 1.0d0,  ! ... For kinetic dissociation"
    }
},
{
    "pk": 45, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "max_number_of_timesteps", 
        "val": " 100,      ! Maximum number of time"
    }
},
{
    "pk": 46, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "time_at_simulation_beginning", 
        "val": " 0.0d0,    ! Time at the beginning of the"
    }
},
{
    "pk": 47, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "time_at_simulation_end", 
        "val": " 8.64e5,   ! Time at the end of the"
    }
},
{
    "pk": 48, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "initial_timestep", 
        "val": " 1.0e-1,   ! Initial time step size"
    }
},
{
    "pk": 49, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "maximum_timestep", 
        "val": " 4.23E+4,  ! Maximum time step size"
    }
},
{
    "pk": 50, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "dt_reduction_factor", 
        "val": " 2.0d0,    ! Reduction factor for cutting"
    }
},
{
    "pk": 51, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "dt_increase_factor", 
        "val": " 2.0d0,    ! Factor by which DT is increased when convergence is attained within <criterion_for_Dt_increase>"
    }
},
{
    "pk": 52, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "units_of_time", 
        "val": " 'sec',    ! = <min>, <hrs>, or <days>; Default is"
    }
},
{
    "pk": 53, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 28, 
        "var_name": "num_of_user_defined_timesteps", 
        "val": " 0         ! Number of the user-specified"
    }
},
{
    "pk": 54, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 17, 
        "var_name": "matrixsolver_option", 
        "val": " 3,        ! MatrixSolver = 1 for direct,  2 for DSLUBC, 3 for"
    }
},
{
    "pk": 55, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 17, 
        "var_name": "max_cgiterationratio", 
        "val": " 1.0d-2,  "
    }
},
{
    "pk": 56, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 17, 
        "var_name": "cg_convergence_crit", 
        "val": " 1.0d-9   "
    }
},
{
    "pk": 57, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 17, 
        "var_name": "z_preprocessing", 
        "val": " 'Z1',     ! ... Options = Z0, Z1, Z2,"
    }
},
{
    "pk": 58, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 17, 
        "var_name": "o_preprocessing", 
        "val": " 'O0'      ! ... Options = O0, O1, O2,"
    }
},
{
    "pk": 59, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 29, 
        "var_name": "max_number_of_nr_iterations", 
        "val": " 10,     ! Maximum number of Newtonian"
    }
},
{
    "pk": 60, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 29, 
        "var_name": "criterion_for_dt_increase", 
        "val": " 5,      ! If NR convergence attained in fewer iterations than this number, then Dt is doubled on the next"
    }
},
{
    "pk": 61, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 29, 
        "var_name": "relative_convergence_criterion", 
        "val": " 2.5d-5, ! Convergence criterion #1 for relative error of Newtonian"
    }
},
{
    "pk": 62, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 29, 
        "var_name": "absolute_convergence_criterion", 
        "val": " 1.0d0,  ! Convergence criterion #2 for absolute error of Newtonian"
    }
},
{
    "pk": 63, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 29, 
        "var_name": "nr_solution_weighing_factor", 
        "val": " 1.0d0   ! Weighing factor of most recent Newton-Raphson solution in updating primary"
    }
},
{
    "pk": 64, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_amount_of_output", 
        "val": " 1,       ! Option determining the amount of"
    }
},
{
    "pk": 65, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_format_of_output", 
        "val": " 'BOTH',  ! = Determining the format of the output (standard T+, plotting-package, or"
    }
},
{
    "pk": 66, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_print_nriterationinfo", 
        "val": " 1,       ! = MOP( 1): Determining the printout amount after each NR"
    }
},
{
    "pk": 67, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_print_cyclinginfo", 
        "val": " 0,       ! = MOP( 2): Determining the printout amount in the simulation cycling"
    }
},
{
    "pk": 68, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_print_jacobianinfo", 
        "val": " 0,       !ndk = MOP( 3): Determining the printout amount in the subroutine setting up the"
    }
},
{
    "pk": 69, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_print_sourcesinkinfo", 
        "val": " 0,       !ndk = MOP( 4): Determining the printout amount in the source/sink"
    }
},
{
    "pk": 70, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_print_eosinfo", 
        "val": " 3,       ! = MOP( 5): Determining the printout amount in the equation-of-state"
    }
},
{
    "pk": 71, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "option_print_solverinfo", 
        "val": " 0,       ! = MOP( 6): Determining the printout amount in the linear equation"
    }
},
{
    "pk": 72, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "flag_print_input_data", 
        "val": " .FALSE., ! = MOP( 7): Flag determining whether the inputs will be printed in the output"
    }
},
{
    "pk": 73, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "output_printfrequency", 
        "val": " 100,      ! Print-outs every <output_PrintFrequency> time"
    }
},
{
    "pk": 74, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "frequency_of_storing_save_file", 
        "val": " 1,     ! Frequency of storing the SAVE"
    }
},
{
    "pk": 75, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "number_specified_output_times", 
        "val": " 1        ! Number of provided print-out times"
    }
},
{
    "pk": 76, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "printouttime", 
        "val": "  8.64d7,   ! Listing of the user-specified times ar which printouts are"
    }
},
{
    "pk": 77, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 30, 
        "var_name": "units_of_time", 
        "val": " 'sec'"
    }
},
{
    "pk": 78, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "upstream_weighting_factor", 
        "val": " 1.0d0,   ! Upstream weighting"
    }
},
{
    "pk": 79, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "implicitness_weighting_factor", 
        "val": " 1.0d0,   ! Weighting factor determining the level of"
    }
},
{
    "pk": 80, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "derivative_increment", 
        "val": " 1.0d-8   ! Increment for estimation of numerical"
    }
},
{
    "pk": 81, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "accelaration_of_gravity", 
        "val": " 9.806d0, ! Acceleration of"
    }
},
{
    "pk": 82, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "p_overshoot", 
        "val": " 1.0d-5, "
    }
},
{
    "pk": 83, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "t_overshoot", 
        "val": " 1.0d-5, "
    }
},
{
    "pk": 84, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "s_overshoot", 
        "val": " 1.0d-5, "
    }
},
{
    "pk": 85, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "option_thermal_conductivity", 
        "val": " 0,       ! Option describing the method for computing the thermal cond. of composite"
    }
},
{
    "pk": 86, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "option_upstream_weighting", 
        "val": " 0,       ! Option describing the method of upstream weighting of mobilities and"
    }
},
{
    "pk": 87, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "option_interface_density", 
        "val": " 0,       ! Option describing the method of estimation of the interface"
    }
},
{
    "pk": 88, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "option_producedfluidcomposition", 
        "val": " 0,       ! Option describing the method of estimation of the interface"
    }
},
{
    "pk": 89, 
    "model": "tough.blockvariable", 
    "fields": {
        "blockType": 31, 
        "var_name": "flag_check_initial_conditions", 
        "val": " .TRUE.   ! Flag for checking the accuracy/correctness/feasibility of assigned initial"
    }
}
]
